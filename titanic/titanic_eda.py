# -*- coding: utf-8 -*-
"""titanic_eda.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I9BrXjT5nWrC1g7wJexF7R4skjNX8mD1
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

plt.style.use('seaborn')
sns.set(font_scale=2.5)

import missingno as msno

import warnings 
warnings.filterwarnings('ignore')

# %matplotlib inline

train = pd.read_csv('/content/sample_data/train.csv')
test = pd.read_csv('/content/sample_data/test.csv')

train.head()

train.describe()

test.describe()

for col in train.columns:
    msg = 'column: {:>10}\t Percent of NaN value: {:.2f}%'.format(col, 100 * (train[col].isnull().sum()/ train[col].shape[0]))
    print(msg)

train.info()

train.iloc[:5,:3]

msno.matrix(df=train.iloc[:,:], figsize=(8,8))

msno.bar(df=train.iloc[:,:], figsize=(8,8))

f, ax = plt.subplots(1,2,figsize=(18,8))

train['Survived'].value_counts().plot.pie(explode=[0,0.1], autopct='%1.1f%%', ax = ax[0], shadow=True)
ax[0].set_title('Pie plot-Survived')
ax[0].set_ylabel('')

sns.countplot('Survived', data=train, ax=ax[1])
ax[1].set_title('Cont plot - Survived')
plt.show()

"""#2.1 Pclass"""

train[['Pclass','Survived']].groupby(['Pclass'], as_index=True).count()
#0,1 전체 카운팅

train[['Pclass','Survived']].groupby(['Pclass']).mean()
#평균 -> 생존확률

pd.crosstab(train['Pclass'], train['Survived'], margins=True)
#0 1의 비교 시각화

train[['Pclass','Survived']].groupby(['Pclass'], as_index=True).mean().sort_values(by='Survived',ascending=False).plot.bar()
#클래스가 높을수록 생존률 높음

y_position = 1.02
f, ax = plt.subplots(1, 2, figsize=(18,8))
train['Pclass'].value_counts().plot.bar(ax=ax[0])
ax[0].set_title('Number of passengers By Pclass',y = y_position)
ax[0].set_ylabel('Count')
sns.countplot('Pclass',hue='Survived', data = train, ax=ax[1])
ax[1].set_title('pclass: Survived vs Dead', y=y_position)
plt.show()

"""#2.2 Sex"""

f, ax = plt.subplots(1, 2, figsize=(18,8))
train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean().plot.bar(ax=ax[0])
ax[0].set_title('Survived vs Sex')
sns.countplot('Sex',hue='Survived', data = train, ax=ax[1])
ax[1].set_title('Sex: Survived vs Dead')
plt.show()

train[['Sex','Survived']].groupby(['Sex'], as_index=True).mean()  #컬럼이 인덱스로 들어감 아니면 0 / 1 이런식

pd.crosstab(train['Sex'],train['Survived'], margins=True)

"""2.2 Both Sex and Pclss"""

sns.factorplot('Pclass', 'Survived', hue='Sex', data=train, size = 5, aspect=1.5)

sns.factorplot('Sex','Survived', hue = 'Pclass', data = train, saturation=.5, size=9, aspect=1)  #hue or col

"""#2.3 Age"""

print('제일 나이 많은 탑승객 : {:.1f} years'.format(train['Age'].max()))
print('제일 어린 탑승객 : {:.1f} years'.format(train['Age'].min()))
print('탑승객 평균 나이 : {:.1f} years'.format(train['Age'].mean()))

f, ax = plt.subplots(1,1,figsize=(9,5))  #kdeplot(sns) 데이터의 분포를 알 때 (히스토그램을 곡선으로)
sns.kdeplot(train[train['Survived'] == 1]['Age'], ax = ax)
sns.kdeplot(train[train['Survived'] == 0]['Age'], ax = ax)
plt.legend(['Survived == 1', 'Survived == 0'])
plt.show()

train[train['Survived'] == 1]['Age']

f = plt.figure(figsize=(10,10))

f, ax = plt.subplots(1,1, figsize=(10,10))

plt.figure(figsize=(10,10)) #matplot의 다양한 방법

f, ax = plt.subplots(1,1,figsize=(8,6))
train['Age'][train['Pclass'] == 1].plot(kind='kde')
train['Age'][train['Pclass'] == 2].plot(kind='kde')
train['Age'][train['Pclass'] == 3].plot(kind='kde')

plt.xlabel('Age')
plt.title('Age Distribution within classes')
plt.legend(['1st Class', '2nd Class', '3rd Class'])

f, ax = plt.subplots(1,1,figsize=(9,5))  #kdeplot(sns) 데이터의 분포를 알 때 (히스토그램을 곡선으로)
sns.kdeplot(train[(train['Survived'] == 0) & (train['Pclass'] == 1)]['Age'], ax = ax)
sns.kdeplot(train[(train['Survived'] == 1) & (train['Pclass'] == 1)]['Age'], ax = ax)
plt.legend(['Survived == 0', 'Survived == 1'])
plt.title('1st Class')
plt.show()

f, ax = plt.subplots(1,1,figsize=(9,5))  #kdeplot(sns) 데이터의 분포를 알 때 (히스토그램을 곡선으로)
sns.kdeplot(train[(train['Survived'] == 0) & (train['Pclass'] == 2)]['Age'], ax = ax)
sns.kdeplot(train[(train['Survived'] == 1) & (train['Pclass'] == 2)]['Age'], ax = ax)
plt.legend(['Survived == 0', 'Survived == 1'])
plt.title('2nd Class')
plt.show()

f, ax = plt.subplots(1,1,figsize=(9,5))  #kdeplot(sns) 데이터의 분포를 알 때 (히스토그램을 곡선으로)
sns.kdeplot(train[(train['Survived'] == 0) & (train['Pclass'] == 3)]['Age'], ax = ax)
sns.kdeplot(train[(train['Survived'] == 1) & (train['Pclass'] == 3)]['Age'], ax = ax)
plt.legend(['Survived == 0', 'Survived == 1'])
plt.title('3nd Class')
plt.show()

#1,2,3 class 에서 모두 젊은 사람이 생존률이 높음

change_age_survival_ratio = []

for i in range(1,80):
    change_age_survival_ratio.append(train[train['Age'] < i]['Survived'].sum() / len(train[train['Age'] < i]))

    
f = plt.figure(figsize=(7,7))
plt.plot(change_age_survival_ratio)
plt.title('Survival rate change depending on range of Age', y = 1.02)
plt.ylabel('Survival rate')
plt.xlabel('Range of Age(0~X)')
plt.show()

i = 10
train[train['Age'] < i]['Survived'].sum()/ len(train[train['Age']<i])*100

#나이가 어릴수록 생존확률이 높음

"""#Pclass, Sex, Age"""

f, ax = plt.subplots(1,2, figsize = (18,8))
sns.violinplot('Pclass','Age', hue='Survived', data = train, scale='count', split=True, ax = ax[0])   # split True False 각자 그래프나옴/ scale area=같은면적, count=survived의 양을 확인가능
ax[0].set_title('Pclass and Age vs Survived')
ax[0].set_yticks(range(0,110,10))

sns.violinplot('Sex','Age', hue='Survived', data = train, scale='count', split=True,ax=ax[1])
ax[1].set_title('Sex and Age vs Survived')
ax[1].set_yticks(range(0, 110, 10))
plt.show()

"""#Embarked (탑승한 항구)"""

f, ax = plt.subplots(1,1,figsize=(7,7)) #항구에 따른 생존확률
train[['Embarked','Survived']].groupby(['Embarked'], as_index=True).mean().plot.bar(ax=ax)

train[['Embarked','Survived']].groupby(['Embarked'], as_index=True).mean().sort_values(by='Survived')

f, ax = plt.subplots(2,2,figsize=(15,15))
sns.countplot(x = 'Embarked',data = train, ax = ax[0,0])
ax[0,0].set_title('(1) No. Of Passengers Boared')

sns.countplot(x = 'Embarked', hue='Sex', data = train, ax = ax[0,1])
ax[0,1].set_title('(2) Male-Female split for Embarked')

sns.countplot(x = 'Embarked', hue='Survived', data = train, ax = ax[1,0])
ax[1,0].set_title('(3) Embarked vs Survived')

sns.countplot(x = 'Embarked', hue='Pclass', data = train, ax = ax[1,1])
ax[1,1].set_title('(4) Embarked vs Pclass')

plt.subplots_adjust(wspace=0.2, hspace=0.5)

"""#Family size"""

train['FamilySize'] = train['SibSp'] + train['Parch'] + 1

train['FamilySize'].max()

f, ax = plt.subplots(1,3,figsize=(25,8))
sns.countplot('FamilySize',data = train,ax = ax[0])
ax[0].set_title('(1) No. Of Passenger Boarded', y=1.02)

sns.countplot('FamilySize',hue='Survived',data = train, ax = ax[1])
ax[1].set_title('(2) Survived countplot depending on FamilySize', y = 1.02)
                                                                #ascending = 오름차순 내림차순 기본 오름차순이라 False(내림차순)로 많이사용
train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax[2])
ax[2].set_title('(3) Survived rate depending on FamilSize', y = 1.02)

plt.subplots_adjust(wspace=0.2, hspace=0.5)
plt.show()

"""#Fare(탑승요금)"""

plt.figure(figsize = (8,8))
g = sns.distplot(train['Fare'], color='b', label='Skewness: {:.2f}'.format(train['Fare'].skew()))
g = g.legend(loc='best')

train['Ticket'].value_counts()